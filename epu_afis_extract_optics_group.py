#!/usr/bin/env python3
import os, glob
import sys
import matplotlib
import starfile
from lxml import etree as ET
import argparse
import numpy as np
import pandas as pd
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
from matplotlib import pyplot as plt
from pathlib import Path

if hasattr(sys, 'ps1') or 'pydevd' in sys.modules:
    matplotlib.use('Qt5Agg')  # Or 'TkAgg' if Qt5 not available
else:
    matplotlib.use('Agg')  # For headless/non-interactive runs

#Parse User Inputs --------------------------------
parser = argparse.ArgumentParser(description='Add optics group information to micrograph and particles star file from xml metadata files generated by EPU during SPA data collection.')
parser.add_argument('-i','--input_micrograph_star',required=True, help = 'Path to micrograph star file in relion 5 format.')
parser.add_argument('-p','--input_particle_star',required=False, default="empty", help = '(Optional) Path to particles star file to add the optics group information to.')
parser.add_argument('-o', '--output_micrograph_star',required=False,default="empty", help = '(Optional) Path/name of the output micrograph star file. If not specified, the output filename will be: <input_micrograph_star_basename>_wOpticsGroup.star')
parser.add_argument('-q','--output_particle_star', required=False, default="empty", help = '(Optional) Path/name of the output particle star file. If not specified, the output filename will be: <input_particle_star_basename>_wOpticsGroup.star. Will be ignored if output_particles_star is specified without specifying input_particles_star.')
parser.add_argument('-x', '--xml_metadata_dir', required=True, help = 'Path to the directory containing data collection metadata as XML files written by EPU. All XML files should be directly in this directory and not inside any sub-directory.')
parser.add_argument('--output_plot',required=False, default="empty", help = '(Optional) Path/name of the output scatter plot (in pdf format) showing the coordinates of the beam-shift clusters, i.e optics groups. If not specified, the output filename will be: <input_micrograph_star_basename>_clusters.pdf')
parser.add_argument('--min_clusters', required=False, default=10, help= '(Optional) Minimum number of k-means clusters to test for best fit. Default = 10')
parser.add_argument('--max_clusters', required=False, default=100, help= '(Optional) Maximum number of k-means clusters to test for best fit. Default = 100')
parser.add_argument('-k', '--override_num_clusters', type=int, required=False, default=-1, help= '(Optional) Number of k-means clusters to use. If explicitly specified, the automatic estimation of best number of clusters will be skipped.')
args = parser.parse_args()

input_micrograph_star = args.input_micrograph_star
output_micrograph_star = f"{Path(input_micrograph_star).stem}_wOpticsGroup.star" if args.output_micrograph_star == "empty" \
    else args.output_micrograph_star

input_particle_star = args.input_particle_star
output_particle_star = f"{Path(input_particle_star).stem}_wOpticsGroup.star" if args.output_particle_star == "empty" \
    else args.output_particle_star

if input_particle_star == "empty" and output_particle_star != "empty":
    print("Path was specified for output particle file but no input particle file was specified. Output particle file path will be ignored.")

xml_metadata_dir = args.xml_metadata_dir
output_plot_path = f"{Path(input_micrograph_star).stem}_clusters.pdf" if args.output_micrograph_star == "empty" \
    else args.output_plot

min_clusters = args.min_clusters
max_clusters = args.max_clusters
override_num_clusters = args.override_num_clusters
# END Parse User Inputs----------------------------------------

#input_micrograph_star = "Z:\\Arjun\\Krios\\20250717_AB204_grid3.4_Krios\\micrographs_v5.star"
#xml_metadata_dir = "Z:\\Arjun\\Krios\\20250717_AB204_grid3.4_Krios\\metadata\\Data"
#input_particle_star = "Z:\\Arjun\\Krios\\20250717_AB204_grid3.4_Krios\\Refine3D\\job015\\run_data.star"


print(f"Reading micrograph star file: {input_micrograph_star}")
micrograph_stardata = starfile.read(input_micrograph_star)
if not isinstance(micrograph_stardata,dict):
    print(f"{input_micrograph_star} is not a relion 5 compatible micrograph star file. If you are using micrograph star file of an older version, update it to ver 5 using relion_convert_star before running this script.")
    exit(1)
print("Done!\n")

print(f"Checking for micrograph XML files in directory: {xml_metadata_dir}")
xml_metadata_list = os.listdir(xml_metadata_dir)

#Check if there is a corresponding xml file for each micrograph entry. Drop all micrographs without xml file. --------
xml_check = [os.path.basename(x).replace("_Fractions.mrc",".xml") in xml_metadata_list for x in micrograph_stardata['micrographs'].rlnMicrographName]
if xml_check.count(False) > 0:
    print(f"Corresponding XML metadata files could not be found for {xml_check.count(False)} micrographs.")
    if xml_check.count(False) <= 50:
        [print(x) for x in micrograph_stardata['micrographs'].rlnMicrographName[np.logical_not(xml_check)]]
    else:
        print(f"Too many missing micrographs (>50). Will not list the missing files.")

print(f"\nCorresponding XML metadata files were found for {xml_check.count(True)} micrographs.")

micrograph_stardata['micrographs'].drop(micrograph_stardata['micrographs'][np.logical_not(xml_check)].index, inplace=True)

#Extract BeamShift values from XML file for each micrograph
beamshift_data_x = []
beamshift_data_y = []

print("\nExtracting beamshift information for micrographs.")
for idx, row in micrograph_stardata['micrographs'].iterrows():
    mic = row.rlnMicrographName

    xml_file = f"{xml_metadata_dir}/{os.path.basename(mic).replace('_Fractions.mrc','.xml')}"
    et_root = ET.parse(xml_file)

    beamshift_x = float(et_root.find('.//{*}BeamShift/{*}_x').text)
    beamshift_y = float(et_root.find('.//{*}BeamShift/{*}_y').text)

    beamshift_data_x.append(beamshift_x)
    beamshift_data_y.append(beamshift_y)

    print(f"{str(idx+1)} out of {str(len(xml_check))}", end = "\r")
print(f"Done!", end = "\r")

print("\n\n")
beamshift_data = np.column_stack((beamshift_data_x, beamshift_data_y))

#K-means--------------------------------------
if override_num_clusters == -1:
    print(f"Testing k = {min_clusters} to {max_clusters} for best fit.")
    best_k = None
    best_score = -1

    for k in range(min_clusters, max_clusters):
        kmeans = KMeans(n_clusters=k).fit(beamshift_data)
        score = silhouette_score(beamshift_data, kmeans.labels_)
        print(f"k = {k}\tScore = {score}")
        if score > best_score:
            best_k = k
            best_score = score

    print(f"\nBest number of clusters: {best_k}.\nDone!")
else:
    print(f"Exactly {override_num_clusters} were requested by the user. Will skip automatic estimation of best number of clusters.")
    best_k = override_num_clusters

kmeans = KMeans(n_clusters=best_k).fit(beamshift_data)
labels = kmeans.labels_
#END K-means-----------------------------------

fig = plt.figure(1)
plt.scatter(beamshift_data_x, beamshift_data_y, c = labels, cmap = 'tab20', s=10)
plt.savefig(output_plot_path, format="pdf", bbox_inches="tight")
print(f"Optics group clusters were plotted and saved at: {output_plot_path}\n")

#Add optics group information back to the micrograph star data
micrograph_stardata['micrographs'].rlnOpticsGroup = labels + 1
row = micrograph_stardata['optics'].loc[0].copy()

micrograph_stardata['optics'].drop(range(0,len(micrograph_stardata['optics'])), inplace = True)
idx = 0
for grp in sorted(np.unique(labels+1)):
    row.rlnOpticsGroup = grp
    row.rlnOpticsGroupName = f"opticsGroup{str(grp)}"
    micrograph_stardata['optics'].loc[idx]=row.copy()
    idx = idx + 1

starfile.write(micrograph_stardata,output_micrograph_star,overwrite = True)
print(f"New micrograph star file with updated optics groups was saved at: {output_micrograph_star}\n")

#Add optics group information to the particles star data

if not input_particle_star == "empty":
    print(f"A particle star file was specified as an input. Will now add optics group information to the particles star file.")
    print(f"Reading particles star file: {input_particle_star}")
    particle_stardata = starfile.read(input_particle_star)
    if not isinstance(micrograph_stardata,dict):
        print(f"{input_particle_star} is not a relion 5 compatible particles star file. If you are using particles star file of an older version, update it to ver 5 using relion_convert_star before running this script.")
        exit(1)
    print("Done!\n")

    print(f"Checking for beam-shift information...")
    #Drop entries in particle star file lacking XML file -----------------------
    xml_check_particles = [os.path.basename(x).replace("_Fractions.mrc",".xml") in xml_metadata_list
                           for x in particle_stardata['particles'].rlnMicrographName]
    particle_stardata['particles'].drop(particle_stardata['particles'][np.logical_not(xml_check_particles)].index, inplace=True)

    print(f"{xml_check_particles.count(False)} particles were dropped because beam-shift information for corresponding micrographs was missing.")
    print("Done!\n")

    print(f"Updating optics group information in particles star file.")
    for idx, mic in micrograph_stardata['micrographs'].iterrows():
        particle_stardata['particles'].loc[particle_stardata['particles'].rlnMicrographName == mic.rlnMicrographName, 'rlnOpticsGroup'] = mic.rlnOpticsGroup
        print(f"Updated particle optics groups for {str(idx + 1)} out of {str(len(micrograph_stardata['micrographs']))} micrographs.", end="\r")

    print("Done!\n\n")

    # Add optics group information back to the micrograph star data
    ptcl_row = particle_stardata['optics'].loc[0].copy()

    particle_stardata['optics'].drop(range(0, len(particle_stardata['optics'])), inplace=True)
    idx = 0
    for grp in sorted(np.unique(labels + 1)):
        ptcl_row.rlnOpticsGroup = grp
        ptcl_row.rlnOpticsGroupName = f"opticsGroup{str(grp)}"
        particle_stardata['optics'].loc[idx] = ptcl_row.copy()
        idx = idx + 1

    starfile.write(particle_stardata, output_particle_star, overwrite=True)
    print(f"New particles star file with updated optics groups was saved at: {output_particle_star}\n")

